@model UberTappDeveloping.ViewModels.VenueBeersViewModel
@{
    ViewBag.Title = "VenueBeers";
    @Styles.Render("~/Content/Custom.css");
}

<h2>VenueBeers</h2>



<div class="container">
    <div class="venues">
        Venues
        <div class="myVenues">

        </div>
    </div>

    <div class="origin">
        All
        <div class="all dropzone">
            @foreach (var item in Model.AllBeers)
            {
                <div class="box">
                    <span>@item.Name</span>
                </div>
            }

            <div class="box">
                <span>A</span>
            </div>
            <div class="box">
                <span>B</span>
            </div>
            <div class="box">
                <span>C</span>
            </div>
            <div class="box">
                <span>D</span>
            </div>
            <div class="box">
                <span>E</span>
            </div>
            <div class="box">
                <span>F</span>
            </div>
        </div>

    </div>

    <div class="destination">
        Available
        <div class="selected dropzone">

        </div>
    </div>

    <form>

        <input id="submit" type="submit" value="Save" />
    </form>

</div>


@section scripts
{


    <script>

        $(document).ready(function () {

            let dragged;
            let items = document.querySelectorAll('.container .box');
            items.forEach(function (item) {
                console.log(item);

                $(item).attr("draggable", "true");



            });



            document.addEventListener("dragstart", function (event) {
                // store a ref. on the dragged elem
                dragged = event.target;
                console.log(event.target);
                // make it half transparent
                event.target.style.opacity = 0.5;
            }, false);

            document.addEventListener("dragend", function (event) {
                // reset the transparency
                event.target.style.opacity = "";
            }, false);

            document.addEventListener("dragenter", function (event) {
                // highlight potential drop target when the draggable element enters it
                console.log(event.target.classList.value);
                if (event.target.classList.contains("dropzone")) {
                    event.target.style.background = "purple";
                }

            }, false);


            document.addEventListener("dragleave", function (event) {
                // reset background of potential drop target when the draggable element leaves it
                if (event.target.classList.contains("dropzone")) {
                    event.target.style.background = "";
                }

            }, false);


            document.addEventListener("dragover", function (event) {
                // prevent default to allow drop
                event.preventDefault();
            }, false);


            document.addEventListener("drop", function (event) {
                // prevent default action (open as link for some elements)
                event.preventDefault();

                for (let i = 0; i < event.srcElement.children.length; i++) {
                    console.log(event.srcElement.children[i]);
                }


                console.log(event.srcElement.children);
                // move dragged elem to the selected drop target
                if (event.target.classList.contains('dropzone')) {

                    event.target.style.background = "";
                    dragged.parentNode.removeChild(dragged);
                    event.target.appendChild(dragged);
                }
            }, false);

            var letters = [];

            $("form").submit(function (e) {
                e.preventDefault();
                console.log($(".selected span").text());

                var elements = $(".selected span").text();
                letters = [];


                for (var i = 0; i < elements.length; i++) {
                    console.log(elements[i]);
                    letters.push(elements[i]);
                }
                console.log(letters);

                var obj = { };
                obj = letters;

                fetch('https://localhost:44380/api/tests', {
                    method: 'POST',
                    body: JSON.stringify({
                        obj
                    }),
                    headers: {
                        'Content-type': 'application/json; charset=UTF-8',
                    },
                })
                    .then((response) => response.json())
                    .then((json) => console.log(json))

            });



        });




    </script>



}



